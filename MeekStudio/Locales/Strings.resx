<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AboutText" xml:space="preserve">
    <value>MeekStudio is an integrated environment for writing scripts in MikuASM and compiling/debugging them using certain game software.

[MeekStudio Credits]
This software uses the ScintillaNET syntax highlighting text editor component by jacobslusser, licensed under the MIT license as of 2020/11/15.
Github link for ScintillaNET: https://github.com/jacobslusser/ScintillaNET

The icon used in the Welcome dialog and as the application icon was designed by @hatsune_negame: https://twitter.com/hatsune_negame

[libmikuasm Credits]
This language support library is based upon the DSC commandset research done by samyuu, nastys, Waelwindows, korenkonder, and the other fine folks on discord.

For DSC file reading and writing libmikuasm is using BinarySerializer by jefffhaynes, licensed under the MIT license as of 2020/11/15. 
Github link for BinarySerializer: https://github.com/jefffhaynes/BinarySerializer

The Interop interface for libmikuasm uses parts of binary patches taken from samyuu's TLAC and PD Loader.
Github link for TLAC: https://github.com/samyuu/TotallyLegitArcadeController
NotABug link for PD Loader: https://notabug.org/PDModdingCommunity/PD-Loader/

The Interop interface also incorporates the No OPD Patch by Skyth.

[DSCDebugServer Credits]

DSCDebugServer uses Microsoft Detours licensed under MIT License as of 2020/11/15.
Github link for Detours: https://github.com/microsoft/Detours

DSCDebugServer incorporates a modified FastBoot routine and some headers (InputState, ButtonState, GameState, SubGameState) from samyuu's TLAC.
See the above part for source code link to TLAC.</value>
  </data>
  <data name="AboutTitle" xml:space="preserve">
    <value>About {0}</value>
  </data>
  <data name="AboutVersion" xml:space="preserve">
    <value>Version {0}</value>
  </data>
  <data name="BtnAnimate" xml:space="preserve">
    <value>Animate</value>
  </data>
  <data name="BtnAnimating" xml:space="preserve">
    <value>Animating...</value>
  </data>
  <data name="BuildErrorTitle" xml:space="preserve">
    <value>Build error</value>
  </data>
  <data name="CloseProjectMsg" xml:space="preserve">
    <value>Are you sure to leave project {0}?</value>
  </data>
  <data name="CloseProjectTitle" xml:space="preserve">
    <value>Close project</value>
  </data>
  <data name="ConfirmTitle" xml:space="preserve">
    <value>Confirm</value>
    <comment>Dialog title</comment>
  </data>
  <data name="DecompileError" xml:space="preserve">
    <value>An error has occurred during decompilation.</value>
  </data>
  <data name="DecompileTitle" xml:space="preserve">
    <value>Decompile: {0}</value>
  </data>
  <data name="DeleteMsg" xml:space="preserve">
    <value>Delete {0}?</value>
    <comment>Dialog message</comment>
  </data>
  <data name="ErrAlreadyProject" xml:space="preserve">
    <value>This looks like an existing project folder.</value>
  </data>
  <data name="ErrBuildFailure" xml:space="preserve">
    <value>Build failure.</value>
  </data>
  <data name="ErrGameExeNotFound" xml:space="preserve">
    <value>Game exe is not configured or doesn't exist</value>
  </data>
  <data name="ErrNoEditor" xml:space="preserve">
    <value>No script editor is active!</value>
  </data>
  <data name="ErrNoProject" xml:space="preserve">
    <value>No project open</value>
  </data>
  <data name="ErrNotProject" xml:space="preserve">
    <value>This does not seem to be a valid project folder.</value>
  </data>
  <data name="ErrNotSet" xml:space="preserve">
    <value>{0} not set or does not exist.</value>
  </data>
  <data name="FailureTitle" xml:space="preserve">
    <value>Failed</value>
  </data>
  <data name="HlpNoneAvail" xml:space="preserve">
    <value>No quick help available.</value>
  </data>
  <data name="ImportFileTitle" xml:space="preserve">
    <value>Import file</value>
    <comment>Dialog title</comment>
  </data>
  <data name="MnuAddFile" xml:space="preserve">
    <value>Add file...</value>
  </data>
  <data name="MnuDelFile" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="MnuEvalFile" xml:space="preserve">
    <value>Execute file</value>
  </data>
  <data name="MnuNewFile" xml:space="preserve">
    <value>New file</value>
  </data>
  <data name="MnuNewFolder" xml:space="preserve">
    <value>New folder</value>
  </data>
  <data name="MnuPvDb" xml:space="preserve">
    <value>PVDB</value>
  </data>
  <data name="MnuPvDbCleanUp" xml:space="preserve">
    <value>Clean up and reorder</value>
  </data>
  <data name="MnuRenFile" xml:space="preserve">
    <value>Rename</value>
  </data>
  <data name="MnuSetAs" xml:space="preserve">
    <value>Set as...</value>
  </data>
  <data name="MsgPreviewing" xml:space="preserve">
    <value>Preview in progress, end to continue.</value>
  </data>
  <data name="MsgWaitSelector" xml:space="preserve">
    <value>Please set the game on song selector screen, then click OK to attach</value>
  </data>
  <data name="OpenProjectTitle" xml:space="preserve">
    <value>Select a project folder</value>
  </data>
  <data name="SelectFolderTitle" xml:space="preserve">
    <value>Select a folder for the project to reside in</value>
  </data>
  <data name="StsBuildFinish" xml:space="preserve">
    <value>Build finished in {0} seconds</value>
  </data>
  <data name="StsBuildStart" xml:space="preserve">
    <value>Build started: {0}</value>
  </data>
  <data name="StsCannotChgThing" xml:space="preserve">
    <value>Could not set {0}</value>
  </data>
  <data name="StsChangedThing" xml:space="preserve">
    <value>Set {0} to {1}</value>
  </data>
  <data name="StsCompile" xml:space="preserve">
    <value>Compile: {0}</value>
  </data>
  <data name="StsDecompiled" xml:space="preserve">
    <value>Decompiled {0} in {1} seconds</value>
  </data>
  <data name="StsDecompileError" xml:space="preserve">
    <value>Could not decompile {0}: {1}</value>
  </data>
  <data name="StsEmit" xml:space="preserve">
    <value>Build: {0}</value>
  </data>
  <data name="StsEval" xml:space="preserve">
    <value>Evaluated: {0}</value>
  </data>
  <data name="StsGameAttached" xml:space="preserve">
    <value>Attached to game process</value>
  </data>
  <data name="StsGameDetached" xml:space="preserve">
    <value>Detached from game process</value>
  </data>
  <data name="StsGameNotAttached" xml:space="preserve">
    <value>Not attached!</value>
  </data>
  <data name="StsNotScript" xml:space="preserve">
    <value>This is not a script!</value>
  </data>
  <data name="StsProjectClose" xml:space="preserve">
    <value>Project unloaded</value>
  </data>
  <data name="StsProjectNew" xml:space="preserve">
    <value>Created new project {0}</value>
  </data>
  <data name="StsProjectOpen" xml:space="preserve">
    <value>Loaded project {0}</value>
  </data>
  <data name="StsPvDbCleanedUp" xml:space="preserve">
    <value>Cleaned up PVDB entry file</value>
  </data>
  <data name="StsStartingDebug" xml:space="preserve">
    <value>Starting debug instance</value>
  </data>
  <data name="StsStartingPreview" xml:space="preserve">
    <value>Starting up preview</value>
  </data>
  <data name="StsWaitReattach" xml:space="preserve">
    <value>Waiting for application to reattach...</value>
  </data>
  <data name="ThingEntrypoint" xml:space="preserve">
    <value>entrypoint script</value>
  </data>
  <data name="ThingMovieAudio" xml:space="preserve">
    <value>movie audio</value>
  </data>
  <data name="ThingMovieDsc" xml:space="preserve">
    <value>movie output</value>
  </data>
  <data name="ThingPvDb" xml:space="preserve">
    <value>PV DB snippet</value>
  </data>
  <data name="WaitSelectorTitle" xml:space="preserve">
    <value>Attach to game</value>
  </data>
</root>
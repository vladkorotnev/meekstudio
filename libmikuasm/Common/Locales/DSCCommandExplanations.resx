<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AUTO_BLINK" xml:space="preserve">
    <value>Makes the character blink the eyes automatically</value>
  </data>
  <data name="BAR_TIME_SET" xml:space="preserve">
    <value>Sets the clock speed of the engine (Legacy command?)</value>
  </data>
  <data name="CHANGE_FIELD" xml:space="preserve">
    <value>Recalls a stage from the specified slot in the PVDB</value>
  </data>
  <data name="CHARA_COLOR" xml:space="preserve">
    <value>Adjusts the specified player's color</value>
  </data>
  <data name="CHARA_HEIGHT_ADJUST" xml:space="preserve">
    <value>Adjusts the character's height</value>
  </data>
  <data name="CHARA_SIZE" xml:space="preserve">
    <value>Sets the size of the character for the specified player</value>
  </data>
  <data name="CLOTH_WET" xml:space="preserve">
    <value>Sets the cloth wetness effect (darken) of the specified character</value>
  </data>
  <data name="DATA_CAMERA" xml:space="preserve">
    <value>Begins playback of camera data from the keyframe DB</value>
  </data>
  <data name="EDIT_BLUSH" xml:space="preserve">
    <value>Sets the blush of the currently edited player</value>
  </data>
  <data name="EDIT_CAMERA" xml:space="preserve">
    <value>Animates the camera across specified points and time with acceleration</value>
  </data>
  <data name="EDIT_DISP" xml:space="preserve">
    <value>Sets the visibility of the currently edited character</value>
  </data>
  <data name="EDIT_FACE" xml:space="preserve">
    <value>Sets the currently edited player's face</value>
  </data>
  <data name="EDIT_SHADOW" xml:space="preserve">
    <value>Sets the visibility of the currently edited character shadow</value>
  </data>
  <data name="EFFECT_OFF" xml:space="preserve">
    <value>Turns off the effect in the specified slot</value>
  </data>
  <data name="END" xml:space="preserve">
    <value>End of file marker, finishes playback and ends the interpreter</value>
  </data>
  <data name="EXPRESSION" xml:space="preserve">
    <value>Sets the specified player to play an expression from the specified expression DB ID</value>
  </data>
  <data name="EYE_ANIM" xml:space="preserve">
    <value>Sets the specified player to animate the eyes with the specified animation</value>
  </data>
  <data name="HAND_ANIM" xml:space="preserve">
    <value>Sets the specified player to animate the hands with the specified animation</value>
  </data>
  <data name="HIDE_FIELD" xml:space="preserve">
    <value>Hides or shows the stage</value>
  </data>
  <data name="LOOK_ANIM" xml:space="preserve">
    <value>Sets the specified player to look at the specified position</value>
  </data>
  <data name="LYRIC" xml:space="preserve">
    <value>Displays a lyric from the PV DB by the number</value>
  </data>
  <data name="MIKU_DISP" xml:space="preserve">
    <value>Sets the visibility of the specified player</value>
  </data>
  <data name="MIKU_MOVE" xml:space="preserve">
    <value>Moves the specified player to the specified position</value>
  </data>
  <data name="MIKU_ROT" xml:space="preserve">
    <value>Rotates the specified player to the specified orientation</value>
  </data>
  <data name="MIKU_SHADOW" xml:space="preserve">
    <value>Sets the shadow visibility of the specified player</value>
  </data>
  <data name="MOUTH_ANIM" xml:space="preserve">
    <value>Sets the specified player to animate the mouth with the specified animation</value>
  </data>
  <data name="MOVE_CAMERA" xml:space="preserve">
    <value>Moves the camera across 2 points over a certain time period</value>
  </data>
  <data name="MOVE_FIELD" xml:space="preserve">
    <value>Offsets the stage?</value>
  </data>
  <data name="MOVIE_DISP" xml:space="preserve">
    <value>Sets the display state of the movie layer</value>
  </data>
  <data name="MOVIE_PLAY" xml:space="preserve">
    <value>Starts playing the movie file</value>
  </data>
  <data name="MUSIC_PLAY" xml:space="preserve">
    <value>Starts playing the music file</value>
  </data>
  <data name="NEAR_CLIP" xml:space="preserve">
    <value>Sets the camera nearclip?</value>
  </data>
  <data name="none" xml:space="preserve">
    <value>No help text available.</value>
  </data>
  <data name="PV_BRANCH_MODE" xml:space="preserve">
    <value>Specifies the currently played branch. 0 - common, 1 - no success, 2 - success.</value>
  </data>
  <data name="PV_END" xml:space="preserve">
    <value>End of PV marker, stops interpreting commands, fades out audio</value>
  </data>
  <data name="SATURATE" xml:space="preserve">
    <value>Sets the color saturation of the display. Amount can be specified as integer, percent (e.g. 120%) or decimal (0.5, same as 50%).</value>
  </data>
  <data name="SCENE_FADE" xml:space="preserve">
    <value>Performs a display fade in/out with the specified color</value>
  </data>
  <data name="SET_CAMERA" xml:space="preserve">
    <value>Sets the camera position?</value>
  </data>
  <data name="SET_CHARA" xml:space="preserve">
    <value>Selects the current character for editing</value>
  </data>
  <data name="SET_MOTION" xml:space="preserve">
    <value>Recalls a motion from the specified PVDB slot for the specified player</value>
  </data>
  <data name="SE_EFFECT" xml:space="preserve">
    <value>Plays the specified success sound effect</value>
  </data>
  <data name="SHADOWHEIGHT" xml:space="preserve">
    <value>Sets the player's shadow height</value>
  </data>
  <data name="TARGET" xml:space="preserve">
    <value>Spawns a target on the screen</value>
  </data>
  <data name="TARGET_FLYING_TIME" xml:space="preserve">
    <value>Sets the speed of the targets</value>
  </data>
  <data name="TIME" xml:space="preserve">
    <value>Timing marker. If current time is below Timestamp, will wait until it's equal, otherwise no-op. In MikuASM, time can be specified as milliseconds, min:sec.ms, min:sec or sec.ms</value>
  </data>
  <data name="WIND" xml:space="preserve">
    <value>Sets the wind options for the specified player</value>
  </data>
</root>